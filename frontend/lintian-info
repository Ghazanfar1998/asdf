#!/usr/bin/perl -w
#
# lintian-info -- transform lintian tags into descriptive text
#
# Copyright (C) 1998 Christian Schwarz and Richard Braakman
#
# This program is free software.  It is distributed under the terms of
# the GNU General Public License as published by the Free Software
# Foundation; either version 2 of the License, or (at your option) any
# later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, you can find it on the World Wide
# Web at http://www.gnu.org/copyleft/gpl.html, or write to the Free
# Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
# MA 02110-1301, USA.

use strict;
use warnings;

use Getopt::Long;

# turn file buffering off:
$| = 1;

BEGIN {
  # determine LINTIAN_ROOT
  my $LINTIAN_ROOT = $ENV{'LINTIAN_ROOT'} || '/usr/share/lintian';
  $ENV{'LINTIAN_ROOT'} = $LINTIAN_ROOT
    unless exists $ENV{'LINTIAN_ROOT'};
}

# import perl libraries
use lib "$ENV{'LINTIAN_ROOT'}/lib";
use Lintian::Internal::FrontendUtil;
use Lintian::Profile;
use Lintian::Tag::Info ();
use Text_utils;

my %already_displayed = ();
my @proc_inc = (
    "$ENV{HOME}/.lintian/profiles",
    '/etc/lintian/profiles',
    "$ENV{'LINTIAN_ROOT'}/profiles"
);
my ($annotate, $tags, $help, $prof);
Getopt::Long::config('bundling', 'no_getopt_compat', 'no_auto_abbrev');
GetOptions(
    'annotate|a' => \$annotate,
    'tags|t' => \$tags,
    'help|h' => \$help,
    'profile' => \$prof,
) or die("error parsing options\n");

# help
if ($help) {
    print <<"EOT";
Usage: lintian-info [log-file...] ...
       lintian-info --annotate [overrides ...]
       lintian-info --tags tag ...

Options:
    -a, --annotate    display descriptions of tags in Lintian overrides
    -t, --tags        display tag descriptions
    --profile X       use vendor profile X to determine severities
EOT

    exit 0;
}

unless ($prof) {
    $prof = find_default_profile(@proc_inc);

}
load_profile($prof, \@proc_inc);

# If tag mode was specified, read the arguments as tags and display the
# descriptions for each one.  (We don't currently display the severity,
# although that would be nice.)
my $unknown;
if ($tags) {
    for my $tag (@ARGV) {
	my $info = Lintian::Tag::Info->new($tag);
	if ($info) {
	    print $info->code . ": $tag\n";
	    print "N:\n";
	    print $info->description('text', 'N:   ');
	} else {
	    print "N: $tag\n";
	    print "N:\n";
	    print "N:	Unknown tag.\n";
	    $unknown = 1;
	}
	print "N:\n";
    }
    exit ($unknown ? 1 : 0);
}

# Otherwise, read input files or STDIN, watch for tags, and add descriptions
# whenever we see one, can, and haven't already explained that tag.  Strip off
# color and HTML sequences.
while (<>) {
    print;
    chomp;
    next if /^\s*$/;
    s/\e[\[\d;]*m//g;
    s/<span style=\"[^\"]+\">//g;
    s,</span>,,g;

    my ($type, $pkg);
    my @pieces = split(/:\s+/);
    if ($annotate) {
        $type = shift @pieces if ($pieces[0] =~ /^\w$/);
        $pkg = shift @pieces if
            ($pieces[0] =~ /^\S+( (binary|changes|udeb))?$/);
    } else {
	$type = shift @pieces;
	$pkg = shift @pieces;
    }
    if ($annotate or (defined $type and $type =~ m/^[OEWIXP]$/)) {
	my $tag = shift @pieces;
	next if not defined $tag;
	($tag) = split(/\s+/, $tag, 2);

	next if $already_displayed{$tag}++;
	my $info = Lintian::Tag::Info->new($tag);
	next unless $info;
	print "N:\n";
	print $info->description('text', 'N:   ');
	print "N:\n";
    }
}

exit 0;

# load_profile($profname, $proc_inc_ref)
#  Loads the profile called $profname and applies
#  the relevant changes from it.
sub load_profile{
    my ($profname, $proc_inc_ref) = @_;
    my $profile = Lintian::Profile->new($prof, $proc_inc_ref);
    my $severities = $profile->severity_changes;
    while ( my ($tagname, $severity) = each(%$severities) ){
	my $tag = Lintian::Tag::Info->new($tagname);
	$tag->set_severity($severity);
    }
}

# Local Variables:
# indent-tabs-mode: t
# cperl-indent-level: 4
# End:
# vim: syntax=perl sw=4 ts=8
